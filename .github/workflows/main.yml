# This is a basic workflow to help you get started with Actions

name: Compile Arduino
#dummy commit
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    paths:
      - 'Arduino/**'
    branches: [ master ]
  pull_request:
    paths:
      - 'Arduino/**'
    branches: [ master ]

jobs:
  build-arduino:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      
    - name: Setup Arduino CLI
      uses: arduino/setup-arduino-cli@v1.0.0
      with:
        # Version to use. Example: 0.5.0
        version: '0.x'
    
    - name: Compile 1010 wifi
      run: |
        cd Arduino
        cp smartswitch/example_Secrets.h smartswitch/Secrets.h
        arduino-cli core update-index
        arduino-cli core install arduino:samd
        arduino-cli lib install WiFiNINA
        mkdir build
        mkdir build-cache
        arduino-cli compile --fqbn arduino:samd:mkrwifi1010 smartswitch


name: deploy to lambda
on:
  push:
    paths:
      - 'lambda/**'
    branches: [master]
  pull_request:
    paths:
      - 'lambda/**'
    branches: [ master ]

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy_zip:
    name: deploy lambda function
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.13.x]
    steps:
      - name: checkout source code
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Build binary
        run: |
          cd lambda && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -a -o main main.go && zip deployment.zip main
      - name: default deploy
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: ${{ secrets.LAMBDA_FUNCTION_NAME }}
          zip_file: ${{ secrets.LAMBDA_FUNCTION_NAME }}/deployment.zip